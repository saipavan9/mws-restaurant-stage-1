{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","response","status","Promise","resolve","reject","Error","statusText","json","idb","upgradeDb","createObjectStore","keyPath","createIndex","openDB","then","db","store","dbPromise","objectStore","getAll","console","restaurantsFromDB","fetch","DATABASE_URL","checkStatus","restaurants","saveRestaurants","data","restaurantsFromAPI","forEach","put","restaurant","tx","complete","log","getRestaurantsFromDB","transaction","callback","error","id","fetchRestaurants","length","find","r","cuisine","filter","cuisine_type","results","neighborhood","map","v","i","uniqueNeighborhoods","neighborhoods","indexOf","cuisines","imgWidth","arguments","undefined","imageUrlForRestaurant","google","maps","Marker","position","latlng","title","url","animation","Animation","DROP"],"mappings":"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","file":"dbhelper.js","sourcesContent":["class DBHelper {\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Check status of Fetch requests.\r\n   */\r\n  static checkStatus(response) {\r\n    if (response.status === 200) {\r\n      return Promise.resolve(response)\r\n    } else {\r\n      return Promise.reject(new Error(`Request has failed. Return status: ${response.statusText}`))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert response to JSON data\r\n   */\r\n  static json(response) {\r\n    return response.json()\r\n  }\r\n\r\n  /**\r\n   * Opens the IndexedDB\r\n   */\r\n  static openDB() {\r\n    const dbPromise = idb.open('restaurantsDB', 1, upgradeDb => {\r\n      const store = upgradeDb.createObjectStore('restaurants', {keyPath: 'id'});\r\n      store.createIndex('by-id', 'id');\r\n    });\r\n    return dbPromise;\r\n  }\r\n\r\n  /**\r\n   * Get the Restaurants from the IDB\r\n   */\r\n  static getRestaurantsFromDB() {\r\n    const restaurantsFromDB = DBHelper.openDB()\r\n    .then( db => {\r\n      console.log('Getting Restaurants From DB');\r\n      if(!db) return;\r\n      let store = db.transaction('restaurants').objectStore('restaurants');\r\n      return store.getAll();\r\n    });\r\n    return restaurantsFromDB;\r\n  }\r\n\r\n  /**\r\n   * Get the Restaurants from the Server API\r\n   */\r\n  static getRestaurantsFromAPI(){\r\n    console.log('Getting Restaurants From API');\r\n    const restaurantsFromAPI = fetch(DBHelper.DATABASE_URL)\r\n    .then(DBHelper.checkStatus)\r\n    .then(DBHelper.json)\r\n    .then(restaurants => {\r\n      DBHelper.saveRestaurants(restaurants);\r\n      return restaurants;\r\n    });\r\n    return restaurantsFromAPI;\r\n  }\r\n\r\n  /**\r\n   * Save restaurant data to IDB\r\n   */\r\n  static saveRestaurants(data){\r\n    return DBHelper.openDB().then(db => {\r\n      if(!db) return;\r\n      const tx = db.transaction('restaurants', 'readwrite');\r\n      const store = tx.objectStore('restaurants');\r\n      data.forEach((restaurant) => {\r\n        store.put(restaurant);\r\n      });\r\n      return tx.complete;\r\n    }).then(() => {\r\n      console.log('Restaurants Saved')\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    return DBHelper.getRestaurantsFromDB().then(restaurants => {\r\n      if(restaurants.length) {\r\n        return Promise.resolve(restaurants);\r\n      } else {\r\n        return DBHelper.getRestaurantsFromAPI();\r\n      }\r\n    }).then(restaurants => {\r\n      callback(null, restaurants);\r\n    }).catch(error => {\r\n      callback(error, null);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant, imgWidth = null) {\r\n    if (imgWidth !== null) {\r\n      return `/build/img/${restaurant.id}-${imgWidth}.jpg`;\r\n    }\r\n    return `/build/img/${restaurant.id}-original.jpg`;\r\n\r\n    //return (`/img/${restaurant.photograph}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image SRCSET.\r\n   */\r\n  static imageSrcSetForRestaurant(restaurant) {\r\n    const widthXsmall   = DBHelper.imageUrlForRestaurant(restaurant, 'xsmall');\r\n    const widthSmall    = DBHelper.imageUrlForRestaurant(restaurant, 'small');\r\n    const widthMedium   = DBHelper.imageUrlForRestaurant(restaurant, 'medium');\r\n    const widthLarge    = DBHelper.imageUrlForRestaurant(restaurant, 'large');\r\n    const widthOriginal = DBHelper.imageUrlForRestaurant(restaurant);\r\n    const imageSrcSet = `${widthXsmall} 360w, ${widthSmall} 520w, ${widthMedium} 800w, ${widthLarge} 1000w, ${widthOriginal} 1500w`;\r\n    return imageSrcSet;\r\n  }\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  //  static mapMarkerForRestaurant(restaurant, map) {\r\n  //   // https://leafletjs.com/reference-1.3.0.html#marker  \r\n  //   const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n  //     {title: restaurant.name,\r\n  //     alt: restaurant.name,\r\n  //     url: DBHelper.urlForRestaurant(restaurant)\r\n  //     })\r\n  //     marker.addTo(newMap);\r\n  //   return marker;\r\n  // } \r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n\r\n"]}