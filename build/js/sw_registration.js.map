{"version":3,"sources":["sw_registration.js"],"names":["registerSW","navigator","register","serviceWorker","log","console","err","connectionStatus","connected","document","getElementById","elAlert","removeChild","DBHelper","checkOfflineReviews","then","reviews","removeOfflineReview","review","checkOfflineFavourites","favourites","forEach","favourite","removeOfflineFavourite","createElement","offlineAlert","setAttribute","offlineAlertText","createTextNode","appendChild","onLine","window","addEventListener"],"mappings":"aAGA,SAASA,aACJ,kBAAmBC,WADxBA,UAASD,cACJE,SAAA,UACSC,KAGsBC,WAAIC,QAAAD,IAAA,8BACzB,SAAcE,GAAAD,QAAAD,IAAA,sCAAAE,KAK7B,IAAMC,iBAAmB,SAACC,GAA1B,GAAMD,EAAAA,CACJ,IAAIC,EAAWC,SAAAC,eAAA,gBACbC,GACAA,EAAGA,cAASC,YAAAD,GAEXE,SAAAC,sBAAAC,KAAA,SAAAC,GACDH,EAASC,QAAAA,SAAAA,GAAAA,OAATD,SAAoCI,oBAAWC,OAC7BL,SAAAM,yBAAqBF,KAAT,SAAAG,GAAZA,EAAhBC,QAAA,SAAAC,GAAA,OAAAT,SAAAU,uBAAAD,WAEFT,CACEO,IAAAA,EAAWC,SAAQG,cAAA,KAAAC,EAAeZ,GAAAA,eAAfY,EAAnBC,aAAA,OAAA,SACD,IAFDC,EAAAlB,SAAAmB,eAAA,4BARFH,EAWOI,YAAAF,GACLlB,SAAIgB,KAAAA,YAAehB,KAInBgB,OAAAA,iBAAaI,OAAYF,WACzBlB,aACDR,UAAA6B,OAnBHvB,kBAAA,GAsBAwB,kBAAOC,KAIJD,OAFDC,iBAEO,SAAA,WAAA,OAAAzB,kBAAA,KAENwB,OAAAC,iBAAA,UAAA,WAAA,OAAAzB,kBAAA","file":"sw_registration.js","sourcesContent":["/**\r\n * Service Worker\r\n */\r\nfunction registerSW() {\r\n  if('serviceWorker' in navigator) {\r\n    navigator.serviceWorker\r\n             .register('/sw.js')\r\n             .then(\r\n               function() { console.log(\"Service Worker Registered\"); },\r\n               function(err) { console.log(\"Service Worker Registration Error: \", err); }\r\n             );\r\n  }\r\n}\r\n\r\nconst connectionStatus = (connected) => {\r\n  if (connected) {\r\n    let elAlert = document.getElementById('offlinealert');\r\n    if(elAlert) {\r\n      elAlert.parentElement.removeChild(elAlert);\r\n    }\r\n    DBHelper.checkOfflineReviews().then(reviews => {\r\n      reviews.forEach((review) => DBHelper.removeOfflineReview(review));\r\n    })\r\n    DBHelper.checkOfflineFavourites().then(favourites => {\r\n      favourites.forEach((favourite) => DBHelper.removeOfflineFavourite(favourite));\r\n    })\r\n  } else {\r\n    let offlineAlert = document.createElement('p');\r\n    offlineAlert.id = 'offlinealert';\r\n    offlineAlert.setAttribute('role', 'alert');\r\n    let offlineAlertText = document.createTextNode(\"Your connection is lost.\");\r\n    offlineAlert.appendChild(offlineAlertText);\r\n    document.body.appendChild(offlineAlert);\r\n  }\r\n}\r\n\r\nwindow.addEventListener('load', () => {\r\n  registerSW();\r\n  if(navigator.onLine) {\r\n    connectionStatus(true)\r\n  } else {\r\n    connectionStatus(false)\r\n  }\r\n});\r\n\r\nwindow.addEventListener('online', () => connectionStatus(true));\r\n\r\nwindow.addEventListener('offline', () => connectionStatus(false));"]}