{"version":3,"sources":["main.js"],"names":["neighborhoods","restaurants","cuisines","fetchNeighborhoods","DBHelper","error","self","console","fillNeighborhoodsHTML","arguments","length","undefined","select","document","getElementById","forEach","neighborhood","createElement","option","value","fetchCuisines","fillCuisinesHTML","cuisine","innerHTML","event","updateRestaurants","toggleMapButton","pressed","labelText","getAttribute","theMap","buttonState","style","height","maps","Map","center","scrollwheel","lng","map","setAttribute","addMarkersToMap","nSelect","cIndex","cSelect","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","fillRestaurantsHTML","markers","m","setMap","resetRestaurants","ul","restaurant","createRestaurantHTML","IntersectionObserver","entries","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","entry","target","childNodes","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","err","_iterator2","return","observer","unobserve","li","picture","appendChild","isIntersecting","targets","sourcewebp","id","sourcexsmall","sourcesmall","imageUrlForRestaurant","sourcemedium","sourcelarge","sourcedesk","picimage","className","alt","name","append","address","observe","moreTitle","more","google","addListener","marker"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  updateRestaurants();\r\n});\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nconst mapToggle = () =>{\r\n\r\n  let theMap = document.getElementById('map');\r\n  let toggleMapButton = document.getElementById('togglemap');\r\n  let buttonState = toggleMapButton.getAttribute('aria-pressed');\r\n  let pressed = 'false';\r\n  let labelText = 'Display Map';\r\n\r\n  if(buttonState == 'true'){\r\n    pressed = 'false';\r\n    labelText = 'Display map';\r\n    theMap.style.height = '0';\r\n    theMap.innerHTML = \"\";\r\n  }\r\n  else{\r\n    let loc = {\r\n      lat: 40.722216,\r\n      lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map(document.getElementById('map'),{\r\n      zoom: 12,\r\n      center: loc,\r\n      scrollwheel: false\r\n    });\r\n    pressed = 'true';\r\n    labelText = 'Hide map';\r\n    theMap.style.height = '400px';\r\n  }\r\n\r\n  toggleMapButton.setAttribute('aria-pressed',pressed);\r\n  toggleMapButton.setAttribute('aria-label',labelText);\r\n  toggleMapButton.innerHTML = labelText;\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Add image lazyloading using IntersectionObserver\r\n */\r\nconst observer = new IntersectionObserver(entries => {\r\n  for (const entry of entries) {\r\n    if (!entry.isIntersecting) return;\r\n    var targets = entry.target.childNodes;\r\n    for (const target of targets) {\r\n      target.setAttribute('srcset',target.getAttribute('data-srcset'));\r\n      if (target.tagName === 'IMG') {\r\n        target.setAttribute('src',target.getAttribute('data-srcset'));\r\n      }\r\n    }\r\n    observer.unobserve(entry.target);\r\n  }\r\n});\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const picture = document.createElement('picture');\r\n  li.appendChild(picture);\r\n  observer.observe(picture);\r\n\r\n  const sourcewebp = document.createElement('source');\r\n  sourcewebp.setAttribute('data-srcset',`img/${restaurant.id}.webp`);\r\n  sourcewebp.setAttribute('type', 'image/webp');\r\n  picture.appendChild(sourcewebp);\r\n\r\n  const sourcexsmall = document.createElement('source');\r\n  sourcexsmall.setAttribute('media', '(min-width: 360px)');\r\n  sourcexsmall.setAttribute('data-srcset',DBHelper.imageUrlForRestaurant(restaurant, 'xsmall'));\r\n  sourcexsmall.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcexsmall);\r\n\r\n  const sourcesmall = document.createElement('source');\r\n  sourcesmall.setAttribute('media', '(min-width: 520px)');\r\n  sourcesmall.setAttribute('data-srcset',DBHelper.imageUrlForRestaurant(restaurant, 'small'));\r\n  sourcesmall.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcesmall);\r\n\r\n  const sourcemedium = document.createElement('source');\r\n  sourcemedium.setAttribute('media', '(min-width: 800px)');\r\n  sourcemedium.setAttribute('data-srcset',DBHelper.imageUrlForRestaurant(restaurant, 'medium'));\r\n  sourcemedium.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcemedium);\r\n\r\n  const sourcelarge = document.createElement('source');\r\n  sourcelarge.setAttribute('media', '(min-width: 1000px)');\r\n  sourcelarge.setAttribute('data-srcset',DBHelper.imageUrlForRestaurant(restaurant, 'large'));\r\n  sourcelarge.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcelarge);\r\n\r\n  const sourcedesk = document.createElement('source');\r\n  sourcedesk.setAttribute('media', '(min-width: 1500px)');\r\n  sourcedesk.setAttribute('data-srcset',`/build/img/${restaurant.id}-original.jpg`);\r\n  sourcedesk.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcedesk);\r\n\r\n  const picimage = document.createElement('img');\r\n  picimage.className = 'restaurant-img';\r\n  picimage.setAttribute('data-srcset',`/build/img/${restaurant.id}-original.jpg`);\r\n  picimage.alt = `Image of ${restaurant.name} restaurant.`;\r\n  picture.appendChild(picimage);\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  const moreTitle = `Read ${restaurant.name}'s restaurant details.`;\r\n  more.innerHTML = 'View Details';\r\n  more.tabIndex = '0';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.setAttribute('aria-label', moreTitle);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}"]}