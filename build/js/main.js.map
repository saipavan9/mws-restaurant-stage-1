{"version":3,"sources":["main.js"],"names":["neighborhoods","restaurants","cuisines","document","addEventListener","event","initMap","fetchNeighborhoods","DBHelper","error","self","console","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","neighborhood","createElement","option","value","fetchCuisines","fillCuisinesHTML","cuisine","innerHTML","append","center","zoom","scrollWheelZoom","L","tileLayer","mapboxToken","addTo","newMap","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fillRestaurantsHTML","resetRestaurants","markers","marker","remove","ul","restaurant","addMarkersToMap","createRestaurantHTML","image","className","li","name","alt","address","more","href","urlForRestaurant","mapMarkerForRestaurant","on","window","location","options","url","push"],"mappings":"aAAA,IACEA,OADEC,iBAAAA,EACFD,mBAAAA,EADFE,cAAAA,EAEEA,QAAAA,GAOFC,SAASC,iBAAiB,mBAAoB,SAACC,GAC7CC,UADFH,qBACEG,kBAQFC,mBAAqB,WACnBC,SAASD,mBAAmB,SAACE,EAAOT,GADtCO,EACEC,QAASD,MAAAA,IACMG,KAAAV,cAAAA,EACXW,4BAQNC,sBAAA,WAAA,IAAAZ,EAAA,EAAAa,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAH,KAAAV,cAIQgB,EAASb,SAASc,eAAe,wBACvCjB,EAAckB,QAAQ,SAAAC,GAFxBP,IAAAA,EAAAA,SAAwBQ,cAAA,UAAwCC,EAAvCrB,UAAuCmB,EAK5DE,EAAOC,MAAQH,EAJjBH,EAAMA,OAASb,MAOhBoB,cARD,WAcEf,SAASe,cAAc,SAACd,EAAOP,GAJjCO,EAMME,QAAQF,MAAMA,IAHpBc,KAAAA,SAAgBrB,EACdM,uBAOCgB,iBAPD,WAAA,IAAAtB,EAAA,EAAAW,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAH,KAAAR,SADFc,EAAAb,SAAAc,eAAA,mBAWAf,EAAAgB,QAAA,SAAAO,GAOI,IAAMJ,EAASlB,SAASiB,cAAc,UACtCC,EAAOK,UAAYD,EALvBD,EAAAA,MAAmBC,EAA8BT,EAA7Bd,OAA6BmB,MAM7CA,QAAAA,WACAL,KAAAA,OAAOW,EAAON,IAAAA,MAAd,CAJFO,OAAA,CAAA,WAAA,WAHFC,KAAA,GAkBQC,iBAAiB,IAEvBC,EAAEC,UAAU,oFAAqF,CAC/FC,YAAa,mGAPjB3B,QAAU,GACRI,YAAcqB,0NAGRD,GAAAA,mBAHNI,MAAAC,QAMEF,qBA0BJG,kBAAoB,WAClB,IAAMC,EAAUlC,SAASc,eAAe,mBAClCqB,EAAUnC,SAASc,eAAe,wBAElCsB,EAASF,EAAQG,cACjBC,EAASH,EAAQE,cAJjBH,EAAUlC,EAASc,GAAAA,MACnBqB,EAAUnC,EAASc,GAATK,MAEhBd,SAAM+B,wCAANd,EAAAN,EAAA,SAAAV,EAAAR,GACMwC,EAOF9B,QAAQF,MAAMA,IAJZU,iBAAemB,GAOjBI,0BACDC,iBAAA,SAAA1C,GAhBLS,KAAAT,YAAA,GA0BaE,SAASc,eAAe,oBANrCS,UAAA,GAGAiB,KAAAA,SACEjC,KAAAkC,QAAA1B,QAAA,SAAA2B,GAAA,OAAAA,EAAAC,WAEApC,KAAMqC,QAAK5C,GACX4C,KAAGrB,YAAHzB,GAIuByC,oBAArB,WAAA,IAAAzC,EAAA,EAAAY,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAH,KAAAT,YACD8C,EAAA5C,SAAAc,eAAA,oBACDP,EAAAQ,QAAA,SAAA8B,GACAtC,EAAKT,OAAAA,qBAAL+C,MAWAC,mBAMFC,qBAAuB,SAACF,GAVtB,IAAMD,EAAK5C,SAASc,cAAe,MAE9BU,EAAOuB,SAAAA,cAAqBF,OAChCG,EAFDC,UAAA,iBAGAH,EAAAA,IAAAA,SAAAA,sBAAAA,GALFI,EAAA1B,OAAAwB,GAQA,IAAAG,EAAAnD,SAAAiB,cAAA,MAYEkC,EAAK5B,UAAYsB,EAAWM,KAC5BH,EAAMI,IAAMP,EAAWM,KAVzBJ,EAAAA,OAAAA,GAaE,IAAM/B,EAAehB,SAASiB,cAAc,KAV5CD,EAAchB,UAASiB,EAAcD,aACrCgC,EAAAA,OAAMC,GAENC,IAAG1B,EAAHxB,SAAAiB,cAAA,KAYAoC,EAAQ9B,UAAYsB,EAAWQ,QAV/BH,EAAA1B,OAAM2B,GAENH,IAAMI,EAAMP,SAAAA,cAAZ,KAKAK,OAJAA,EAAG1B,UAAH,eAYA8B,EAAKC,KAAOlD,SAASmD,iBAAiBX,GAVtCK,EAAA1B,OAAMR,GAEHQ,GAMHsB,gBAAa9C,YAAb,EAAAU,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAsBO,KAAcnB,aAC/ByB,QAAY,SAAAsB,GAEjBK,IAAG1B,EAAHnB,SAAAoD,uBAAAZ,EAAAtC,KAAAyB,QAYEU,EAAOgB,GAAG,QAVZ,WA1BFC,OAAAC,SAAAL,KAAAb,EAAAmB,QAAAC,MA6BAvD,KAAAkC,QAAAsB,KAAArB","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar newMap\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  initMap(); // added \r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\r\ninitMap = () => {\r\n  self.newMap = L.map('map', {\r\n        center: [40.722216, -73.987501],\r\n        zoom: 12,\r\n        scrollWheelZoom: false\r\n      });\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n    mapboxToken: 'pk.eyJ1Ijoic2FpcGF2YW45OTk5IiwiYSI6ImNqaXp1dGtpbTBiNjYzd3F1cGE5d2dxYnYifQ.0JfaUIcfuRwpEouFZVT6yA',\r\n    maxZoom: 18,\r\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n      'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n    id: 'mapbox.streets'\r\n  }).addTo(newMap);\r\n\r\n  updateRestaurants();\r\n}\r\n/* window.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n} */\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  image.alt = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\r\n    marker.on(\"click\", onClick);\r\n    function onClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n\r\n} \r\n\r\n"]}