{"version":3,"sources":["main.js"],"names":["neighborhoods","restaurants","cuisines","fetchNeighborhoods","DBHelper","error","self","console","fillNeighborhoodsHTML","arguments","length","undefined","select","document","getElementById","forEach","neighborhood","createElement","option","value","fetchCuisines","fillCuisinesHTML","cuisine","innerHTML","event","updateRestaurants","map","google","maps","Map","zoom","center","lng","window","scrollwheel","cSelect","nSelect","cIndex","selectedIndex","nIndex","resetRestaurants","markers","m","setMap","fillRestaurantsHTML","restaurant","ul","append","createRestaurantHTML","image","srcset","imageSrcSetForRestaurant","addMarkersToMap","li","name","src","imageUrlForRestaurant","address","more","href","urlForRestaurant","moreTitle","setAttribute","addListener","marker","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  updateRestaurants();\r\n});\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  //updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.srcset = DBHelper.imageSrcSetForRestaurant(restaurant);\r\n  image.alt = `Image of ${restaurant.name} restaurant.`;\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  const moreTitle = `Read ${restaurant.name}'s restaurant details.`;\r\n  more.innerHTML = 'View Details';\r\n  more.tabIndex = '0';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.setAttribute('aria-label', moreTitle);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}"]}