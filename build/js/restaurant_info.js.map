{"version":3,"sources":["restaurant_info.js"],"names":["newMap","restaurant","window","initMap","fetchRestaurantFromURL","error","self","map","google","maps","Map","document","getElementById","console","center","latlng","scrollwheel","callback","id","getParameterByName","DBHelper","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","innerHTML","name","address","image","srcset","imageSrcSetForRestaurant","cuisine","fillRestaurantHoursHTML","operatingHours","operating_hours","fillReviewsHTML","key","row","createElement","day","time","hours","appendChild","reviews","container","title","noReviews","createReviewHTML","review","ul","forEach","li","date","rating","comments","fillBreadcrumb","breadcrumb","url","location","href","replace","results","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar newMap;\n\n/**\n * Initialize leaflet map\n */\n// window.initMap = () => {\n//   fetchRestaurantFromURL((error, restaurant) => {\n//     if (error) { // Got an error!\n//       console.error(error);\n//     } else {      \n//       self.newMap = L.map('map', {\n//         center: [restaurant.latlng.lat, restaurant.latlng.lng],\n//         zoom: 16,\n//         scrollWheelZoom: false\n//       });\n//       L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n//         mapboxToken: 'pk.eyJ1Ijoic2FpcGF2YW45OTk5IiwiYSI6ImNqaXp1dGtpbTBiNjYzd3F1cGE5d2dxYnYifQ.0JfaUIcfuRwpEouFZVT6yA',\n//         maxZoom: 18,\n//         attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n//           '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n//           'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n//         id: 'mapbox.streets'    \n//       }).addTo(newMap);\n//       fillBreadcrumb();\n//       DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n//     }\n//   });\n// }  \n \n window.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n} \n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    const error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img'\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.srcset = DBHelper.imageSrcSetForRestaurant(restaurant);\n  image.alt = `Image of ${restaurant.name} restaurant.`;\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}"]}