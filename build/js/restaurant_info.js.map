{"version":3,"sources":["restaurant_info.js"],"names":["newMap","restaurant","document","addEventListener","event","initMap","fetchRestaurantFromURL","error","self","L","map","console","latlng","lat","lng","zoom","scrollWheelZoom","maxZoom","tileLayer","attribution","id","fillBreadcrumb","callback","getParameterByName","fetchRestaurantById","DBHelper","fillRestaurantHTML","arguments","length","undefined","getElementById","innerHTML","name","address","image","className","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","title","noReviews","ul","createReviewHTML","review","li","date","rating","comments","breadcrumb","url","results","decodeURIComponent","replace"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar newMap;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {  \n  initMap();\n});\n\n/**\n * Initialize leaflet map\n */\ninitMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {      \n      self.newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n        mapboxToken: 'pk.eyJ1Ijoic2FpcGF2YW45OTk5IiwiYSI6ImNqaXp1dGtpbTBiNjYzd3F1cGE5d2dxYnYifQ.0JfaUIcfuRwpEouFZVT6yA',\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n          'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets'    \n      }).addTo(newMap);\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n    }\n  });\n}  \n \n/* window.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n} */\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img';\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.alt = restaurant.name;\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"]}