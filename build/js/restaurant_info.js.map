{"version":3,"sources":["restaurant_info.js"],"names":["map","restaurant","mapToggle","theMap","document","getElementById","toogleMapButton","buttonState","pressed","labelText","height","innerHTML","maps","Map","zoom","self","google","scrollwheel","setAttribute","fetchRestaurantFromURL","Promise","resolve","reject","id","getParameterByName","DBHelper","fetchRestaurantById","error","then","reviews","fillReviewsHTML","fillRestaurantHTML","fetchReviewByRestaurant","fillFavouritesHTML","arguments","length","undefined","name","picture","address","sourcewebp","createElement","className","appendChild","imageUrlForRestaurant","sourcexsmall","sourcesmall","sourcemedium","sourcelarge","sourcedesk","picimage","alt","cuisine","fillRestaurantHoursHTML","operatingHours","operating_hours","hours","key","row","day","time","container","title","noReviews","forEach","review","ul","createReviewHTML","li","date","Date","updatedAt","toLocaleDateString","rating","comments","breadcrumb","url","replace","results","exec","submitReview","decodeURIComponent","formEl","formElID","value","parseInt","i","fieldName","sendReview","favButton","classList","toggle","getAttribute","sendFavourite","is_favorite","remove","add","fillBreadcrumb","addEventListener","ev","preventDefault","console","resetReviewsHTML","form","err","log"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar map;\n\n/**\n * Initialize Google map, on user input.\n */\nconst mapToggle = () => {\n  let theMap = document.getElementById('map');\n  let toogleMapButton = document.getElementById('togglemap');\n  let buttonState = toogleMapButton.getAttribute('aria-pressed');\n  let pressed = 'false';\n  let labelText = 'Display map';\n  \n  if (buttonState === 'true') {\n    pressed = 'false';\n    labelText = 'Display map';\n    theMap.style.height = '0';\n    theMap.innerHTML = \"\";\n  } else {\n    self.map = new google.maps.Map(document.getElementById('map'), {\n      zoom: 16,\n      center: restaurant.latlng,\n      scrollwheel: false\n    });\n    pressed = 'true';\n    labelText = 'Hide map';\n  }\n\n  toogleMapButton.setAttribute('aria-pressed', pressed);\n  toogleMapButton.setAttribute('aria-label', labelText);\n  toogleMapButton.innerHTML = labelText;\n\n  DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n}\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = () => {\n  return new Promise((resolve, reject) => {\n    if (self.restaurant) { // restaurant already fetched!\n      return resolve(self.restaurant)\n    }\n    const id = getParameterByName('id');\n    if (!id) { // no id found in URL\n      const error = 'No restaurant id in URL'\n      return reject(error);\n    } else {\n      DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n        self.restaurant = restaurant;\n        if (!restaurant) {\n          return reject(error);\n        }\n        fillRestaurantHTML();\n        DBHelper.fetchReviewByRestaurant(restaurant.id)\n        .then((reviews) => {\n          fillReviewsHTML(reviews);\n          fillFavouritesHTML(restaurant.is_favorite);\n          return resolve(self.restaurant);\n        }).catch(err => {\n          return reject(err);\n        })\n        //return resolve(self.restaurant);\n      });\n    }\n  });\n}\n\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const picture = document.getElementById('restaurant-img');\n  picture.className = 'restaurant-img';\n  \n  const sourcewebp = document.createElement('source');\n  sourcewebp.srcset = `img/${restaurant.id}.webp`;\n  sourcewebp.setAttribute('type', 'image/webp');\n  picture.appendChild(sourcewebp);\n\n  const sourcexsmall = document.createElement('source');\n  sourcexsmall.setAttribute('media', '(min-width: 360px)');\n  sourcexsmall.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'xsmall');\n  sourcexsmall.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcexsmall);\n\n  const sourcesmall = document.createElement('source');\n  sourcesmall.setAttribute('media', '(min-width: 520px)');\n  sourcesmall.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'small');\n  sourcesmall.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcesmall);\n\n  const sourcemedium = document.createElement('source');\n  sourcemedium.setAttribute('media', '(min-width: 800px)');\n  sourcemedium.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'medium');\n  sourcemedium.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcemedium);\n\n  const sourcelarge = document.createElement('source');\n  sourcelarge.setAttribute('media', '(min-width: 1000px)');\n  sourcelarge.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'large');\n  sourcelarge.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcelarge);\n\n  const sourcedesk = document.createElement('source');\n  sourcedesk.setAttribute('media', '(min-width: 1500px)');\n  sourcedesk.srcset = `/build/img/${restaurant.id}-original.jpg`;\n  sourcedesk.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcedesk);\n\n  const picimage = document.createElement('img');\n  picimage.className = 'restaurant-img';\n  picimage.src = DBHelper.imageUrlForRestaurant(restaurant);\n  picimage.alt = `Image of ${restaurant.name} restaurant.`;\n  picture.appendChild(picimage);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Remove all reviews HTML.\n */\nconst resetReviewsHTML = () => {\n  const container = document.getElementById('reviews-container');\n  container.innerHTML = \"\";\n  const ul = document.createElement('ul');\n  ul.id = 'reviews-list';\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = new Date(review.updatedAt).toLocaleDateString();\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\n/**\n * Catch the restaurant review form action.\n */\nconst submitReview = () => {\n  let review = {};\n  let formEl = document.getElementById('post-review-form');\n  let formElID = document.getElementById('restaurant_id');\n  formElID.value = parseInt(getParameterByName('id'));\n  formEl.appendChild(formElID);\n  for (let i = 0; i < formEl.length; ++i) {\n    let fieldName = formEl[i].name;\n    let value = formEl[i].value;\n    if (fieldName === \"\" || value === \"\") continue;\n    if (fieldName === \"restaurant_id\" || fieldName === \"rating\") {\n      value = parseInt(value);\n    }\n    review[formEl[i].name] = value;\n  }\n  formEl.reset();\n  DBHelper.sendReview(review);\n}\n\n/**\n * Manage Favorite button\n */\nconst favoriteToggle = () => {\n  let favButton = document.getElementById('is_fav');\n  favButton.classList.toggle('is_favorite');\n\n  let buttonState = favButton.getAttribute('aria-pressed');\n  let pressed = 'false';\n  let labelText = 'Mark as favourite';\n  \n  if (buttonState === 'true') {\n    pressed = 'false';\n    labelText = 'Mark as favourite';\n  } else {\n    pressed = 'true';\n    labelText = 'Remove favourite';\n  }\n\n  favButton.setAttribute('aria-pressed', pressed);\n  favButton.setAttribute('aria-label', labelText);\n  favButton.innerHTML = labelText;\n\n  const id = getParameterByName('id');\n  DBHelper.sendFavourite(id, pressed);\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillFavouritesHTML = (is_favorite) => {\n  let favButton = document.getElementById('is_fav');\n  let pressed = '';\n  let labelText = '';\n\n  if (is_favorite === 'true' || is_favorite === true) {\n    pressed = 'true';\n    labelText = 'Remove favourite';\n    favButton.classList.add('is_favorite');\n  } else {\n    pressed = 'false';\n    labelText = 'Mark as favourite';\n    favButton.classList.remove('is_favorite');\n  }\n\n  favButton.setAttribute('aria-pressed', pressed);\n  favButton.setAttribute('aria-label', labelText);\n  favButton.innerHTML = labelText;\n}\n\n/**\n * Init\n */\n(()=> {\n  console.log('restaurant Init!!!')\n  fetchRestaurantFromURL()\n  .then((restaurant) => {\n    fillBreadcrumb();\n    let form = document.getElementById('post-review-form');\n    form.addEventListener('submit', function(ev) {\n      ev.preventDefault();\n      submitReview();\n    })\n    document.addEventListener(\"update_reviews_list\", ev => {\n      resetReviewsHTML()\n      DBHelper.fetchReviewByRestaurant(restaurant.id)\n      .then((reviews) => {\n        fillReviewsHTML(reviews);\n        //return resolve(self.restaurant);\n      })\n    })\n  })\n  .catch((err) => {\n    console.error('Init Error: ', err);\n    console.log(err);\n  });\n})();"]}