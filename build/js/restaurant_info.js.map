{"version":3,"sources":["restaurant_info.js"],"names":["newMap","restaurant","theMap","document","getElementById","mapToggle","toogleMapButton","buttonState","pressed","labelText","height","innerHTML","maps","Map","zoom","self","google","scrollwheel","setAttribute","map","fetchRestaurantFromURL","Promise","resolve","reject","id","getParameterByName","DBHelper","fetchRestaurantById","error","then","reviews","fillReviewsHTML","fillRestaurantHTML","fetchReviewByRestaurant","fillFavouritesHTML","arguments","length","undefined","name","address","picture","className","sourcewebp","srcset","createElement","imageUrlForRestaurant","appendChild","sourcexsmall","sourcesmall","sourcemedium","sourcelarge","sourcedesk","picimage","operating_hours","fillRestaurantHoursHTML","operatingHours","hours","key","row","day","time","container","title","noReviews","ul","createReviewHTML","review","li","date","Date","updatedAt","toLocaleDateString","rating","comments","breadcrumb","url","results","decodeURIComponent","replace","submitReview","formEl","formElID","value","parseInt","i","fieldName","favoriteToggle","sendReview","favButton","getAttribute","classList","is_favorite","sendFavourite","remove","add","fillBreadcrumb","addEventListener","ev","preventDefault","form","err"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar newMap;\n\nconst mapToggle = () => {\n  let theMap = document.getElementById('map');\n  let toogleMapButton = document.getElementById('togglemap');\n  let buttonState = toogleMapButton.getAttribute('aria-pressed');\n  let pressed = 'false';\n  let labelText = 'Display map';\n  \n  if (buttonState === 'true') {\n    pressed = 'false';\n    labelText = 'Display map';\n    theMap.style.height = '0';\n    theMap.innerHTML = \"\";\n  } else {\n    self.map = new google.maps.Map(document.getElementById('map'), {\n      zoom: 16,\n      center: restaurant.latlng,\n      scrollwheel: false\n    });\n    pressed = 'true';\n    labelText = 'Hide map';\n  }\n\n  toogleMapButton.setAttribute('aria-pressed', pressed);\n  toogleMapButton.setAttribute('aria-label', labelText);\n  toogleMapButton.innerHTML = labelText;\n\n  DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n}\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = () => {\n  return new Promise((resolve, reject) => {\n    if (self.restaurant) { // restaurant already fetched!\n      return resolve(self.restaurant)\n    }\n    const id = getParameterByName('id');\n    if (!id) { // no id found in URL\n      const error = 'No restaurant id in URL'\n      return reject(error);\n    } else {\n      DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n        self.restaurant = restaurant;\n        if (!restaurant) {\n          return reject(error);\n        }\n        fillRestaurantHTML();\n        DBHelper.fetchReviewByRestaurant(restaurant.id)\n        .then((reviews) => {\n          fillReviewsHTML(reviews);\n          fillFavouritesHTML(restaurant.is_favorite);\n          return resolve(self.restaurant);\n        }).catch(err => {\n          return reject(err);\n        })\n        //return resolve(self.restaurant);\n      });\n    }\n  });\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const picture = document.getElementById('restaurant-img');\n  picture.className = 'restaurant-img';\n  \n  const sourcewebp = document.createElement('source');\n  sourcewebp.srcset = `/source/img/${restaurant.id}.webp`;\n  sourcewebp.setAttribute('type', 'image/webp');\n  picture.appendChild(sourcewebp);\n\n  const sourcexsmall = document.createElement('source');\n  sourcexsmall.setAttribute('media', '(min-width: 360px)');\n  sourcexsmall.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'xsmall');\n  sourcexsmall.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcexsmall);\n\n  const sourcesmall = document.createElement('source');\n  sourcesmall.setAttribute('media', '(min-width: 520px)');\n  sourcesmall.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'small');\n  sourcesmall.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcesmall);\n\n  const sourcemedium = document.createElement('source');\n  sourcemedium.setAttribute('media', '(min-width: 800px)');\n  sourcemedium.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'medium');\n  sourcemedium.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcemedium);\n\n  const sourcelarge = document.createElement('source');\n  sourcelarge.setAttribute('media', '(min-width: 1000px)');\n  sourcelarge.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'large');\n  sourcelarge.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcelarge);\n\n  const sourcedesk = document.createElement('source');\n  sourcedesk.setAttribute('media', '(min-width: 1500px)');\n  sourcedesk.srcset = `/build/img/${restaurant.id}-original.jpg`;\n  sourcedesk.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcedesk);\n\n  const picimage = document.createElement('img');\n  picimage.className = 'restaurant-img';\n  picimage.src = DBHelper.imageUrlForRestaurant(restaurant);\n  picimage.alt = `Image of ${restaurant.name} restaurant.`;\n  picture.appendChild(picimage);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Remove all reviews HTML.\n */\nconst resetReviewsHTML = () => {\n  const container = document.getElementById('reviews-container');\n  container.innerHTML = \"\";\n  const ul = document.createElement('ul');\n  ul.id = 'reviews-list';\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = new Date(review.updatedAt).toLocaleDateString();\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\n/**\n * Catch the restaurant review form action.\n */\nconst submitReview = () => {\n  let review = {};\n  let formEl = document.getElementById('post-review-form');\n  let formElID = document.getElementById('restaurant_id');\n  formElID.value = parseInt(getParameterByName('id'));\n  formEl.appendChild(formElID);\n  for (let i = 0; i < formEl.length; ++i) {\n    let fieldName = formEl[i].name;\n    let value = formEl[i].value;\n    if (fieldName === \"\" || value === \"\") continue;\n    if (fieldName === \"restaurant_id\" || fieldName === \"rating\") {\n      value = parseInt(value);\n    }\n    review[formEl[i].name] = value;\n  }\n  formEl.reset();\n  DBHelper.sendReview(review);\n}\n\n/**\n * Manage Favorite button\n */\nconst favoriteToggle = () => {\n  let favButton = document.getElementById('is_fav');\n  favButton.classList.toggle('is_favorite');\n\n  let buttonState = favButton.getAttribute('aria-pressed');\n  let pressed = 'false';\n  let labelText = 'Mark as favourite';\n  \n  if (buttonState === 'true') {\n    pressed = 'false';\n    labelText = 'Mark as favourite';\n  } else {\n    pressed = 'true';\n    labelText = 'Remove favourite';\n  }\n\n  favButton.setAttribute('aria-pressed', pressed);\n  favButton.setAttribute('aria-label', labelText);\n  favButton.innerHTML = labelText;\n\n  const id = getParameterByName('id');\n  DBHelper.sendFavourite(id, pressed);\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillFavouritesHTML = (is_favorite) => {\n  let favButton = document.getElementById('is_fav');\n  let pressed = '';\n  let labelText = '';\n\n  if (is_favorite === 'true' || is_favorite === true) {\n    pressed = 'true';\n    labelText = 'Remove favourite';\n    favButton.classList.add('is_favorite');\n  } else {\n    pressed = 'false';\n    labelText = 'Mark as favourite';\n    favButton.classList.remove('is_favorite');\n  }\n\n  favButton.setAttribute('aria-pressed', pressed);\n  favButton.setAttribute('aria-label', labelText);\n  favButton.innerHTML = labelText;\n}\n\n/**\n * Init\n */\n(()=> {\n  console.log('Restaurant Init!!!')\n  fetchRestaurantFromURL()\n  .then((restaurant) => {\n    fillBreadcrumb();\n    let form = document.getElementById('post-review-form');\n    form.addEventListener('submit', function(ev) {\n      ev.preventDefault();\n      submitReview();\n    })\n    document.addEventListener(\"update_reviews_list\", ev => {\n      resetReviewsHTML()\n      DBHelper.fetchReviewByRestaurant(restaurant.id)\n      .then((reviews) => {\n        fillReviewsHTML(reviews);\n        //return resolve(self.restaurant);\n      })\n    })\n  })\n  .catch((err) => {\n    console.error('Init Error: ', err);\n  });\n})();"]}